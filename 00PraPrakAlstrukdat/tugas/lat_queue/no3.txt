NOMOR 3

{bagian a}
KAMUS UMUM
constant IDX_UNDEF : integer = -1
constant CAPACITY : integer = 100

type ElType = <id: integer, cost: integer> {elemen Queue}

{Queue dengan array statik}
type Queue: < T : array [0..CAPACITY-1] of ElType,
            idxHead : integer, {indeks elemen terdepan}
            idxTail : integer > {indeks elemen terakhir}

{bagian b}
procedure enqueue (input/output q: queue, input val: ElType)
{Proses: menambahkan val sebagai elemen baru di q, dengan
    memperhatikan lamanya waktu pekerjaan tsb dapat
    diselesaikan, yaitu pekerjaan yang lebih cost diletakkan
    lebih akhir. Jika ada 2 pekerjaan yang cost waktunya sama,
    pekerjaan terakhir yang baru datang disisipkan lebih belakang}
{IS: q mungkin kosong, q tidak penuh}
{FS: val menjadi elemen q yang baru dengan urutan waktu pekerjaan
    membesar}
KAMUS LOKAL
    idxMax: integer = CAPACITY - 1
ALGORITMA
    if (q.idxHead == IDX_UNDEF) then {keadaan kosong}
        q.idxHead ← 0
        q.idxTail ← 0
        q.T[q.idxTail] ← val
    else
        if (q.idxTail < idxMax) then {keadaan tidak penuh}
            if (q.T[q.idxTail].cost < val.cost) then
                q.idxTail ← q.idxTail + 1
                q.T[q.idxTail] ← val
            else
                i ← q.idxTail
                while ((i >= q.idxHead) and (q.T[i].cost > val.cost)) do
                    q.T[i+1] ← q.T[i]
                    i ← i - 1
                q.T[i+1] ← val
                q.idxTail ← q.idxTail + 1
        else {keadaan penuh semu}
            i ← q.idxHead
            while (i <= idxMax) do
                q.T[i-idxHead] ← q.T[i]
                i ← i + 1
            q.idxHead ← 0
            q.idxTail ← idxMax - idxHead
            if (q.T[q.idxTail].cost < val.cost) then
                q.idxTail ← q.idxTail + 1
                q.T[q.idxTail] ← val
            else
                i ← q.idxTail
                while ((i >= q.idxHead) and (q.T[i].cost > val.cost)) do
                    q.T[i+1] ← q.T[i]
                    i ← i - 1
                q.T[i+1] ← val
                q.idxTail ← q.idxTail + 1

{bagian c}
procedure dequeue (input/output q: queue, output val: ElType)
{Proses: menyimpan head q pada val dan menghapus head dari q}
{IS: q tidak kosong}
{FS: elemen pada HEAD dihapus, dan disimpan nilainya pada val}
ALGORITMA
    val ← q.T[q.idxHead]
    if (q.idxHead == q.idxTail) then {keadaan hanya 1 elemen}
        q.idxHead ← IDX_UNDEF
        q.idxTail ← IDX_UNDEF
    else
        q.idxHead ← q.idxHead + 1




    
